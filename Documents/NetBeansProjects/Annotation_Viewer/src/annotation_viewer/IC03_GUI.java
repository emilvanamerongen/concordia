package annotation_viewer;

import java.io.File;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import java.sql.Connection;
import javax.swing.JOptionPane;

/**
 *
 * @author Alex
 * @version 2.0
 * @since 8-4-2016
 */
public class IC03_GUI extends javax.swing.JFrame{
    
    //// Fields
    
    /**
     * Creates new form Viewer_GUI
     */
    private Annotation_Viewer annotationViewer;
    private CurrentDatabase chooseCurrentDatabase;
    private SaveData saveData;
    private Boolean fromFile;
    private Boolean fromDatabase;
    private String originalSequence;
    private String proteinSequence;
    Connection con = null;

    //// Constructor
    
    public IC03_GUI() {
        initComponents();
        saveData = new SaveData();
        setVisible(true);
        pack();
        selectToHighlight_Button.setSelected(false);
    }
    
    /**
     * 
     * @param aThis 
     */
    IC03_GUI(Annotation_Viewer aThis) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    //// Methods
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        proteinsequenceTextField = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        sequenceDetailsTextField = new javax.swing.JTextArea();
        forwardStrand_label = new javax.swing.JLabel();
        translationStrand_label = new javax.swing.JLabel();
        totalbases_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        forwardStrandTextArea = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        File_From_Database_Button = new javax.swing.JMenu();
        open_Files_From_DB_Button = new javax.swing.JMenuItem();
        sequence_From_File_Button = new javax.swing.JMenuItem();
        annotation_From_File_Button = new javax.swing.JMenuItem();
        selectToHighlight_Button = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        check_Connection_Button = new javax.swing.JMenuItem();
        choose_Database_Button = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Annotation Viewer");

        proteinsequenceTextField.setColumns(20);
        proteinsequenceTextField.setRows(5);
        jScrollPane2.setViewportView(proteinsequenceTextField);

        sequenceDetailsTextField.setColumns(20);
        sequenceDetailsTextField.setRows(5);
        jScrollPane3.setViewportView(sequenceDetailsTextField);

        forwardStrand_label.setText("Forward Strand");

        translationStrand_label.setText("Translation");

        totalbases_label.setText("Total bases: ");

        forwardStrandTextArea.setColumns(20);
        forwardStrandTextArea.setRows(5);
        jScrollPane1.setViewportView(forwardStrandTextArea);

        File_From_Database_Button.setText("File");

        open_Files_From_DB_Button.setText("Open files from database");
        open_Files_From_DB_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_Files_From_DB_ButtonActionPerformed(evt);
            }
        });
        File_From_Database_Button.add(open_Files_From_DB_Button);

        sequence_From_File_Button.setText("Choose sequence from file");
        sequence_From_File_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sequence_From_File_ButtonActionPerformed(evt);
            }
        });
        File_From_Database_Button.add(sequence_From_File_Button);

        annotation_From_File_Button.setText("Choose annotation from file");
        annotation_From_File_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annotation_From_File_ButtonActionPerformed(evt);
            }
        });
        File_From_Database_Button.add(annotation_From_File_Button);

        selectToHighlight_Button.setSelected(true);
        selectToHighlight_Button.setText("Highlight annotations");
        selectToHighlight_Button.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        selectToHighlight_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectToHighlight_ButtonActionPerformed(evt);
            }
        });
        File_From_Database_Button.add(selectToHighlight_Button);

        jMenuBar2.add(File_From_Database_Button);

        jMenu4.setText("Database status");

        check_Connection_Button.setText("Check connection");
        jMenu4.add(check_Connection_Button);

        choose_Database_Button.setText("Choose database");
        choose_Database_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choose_Database_ButtonActionPerformed(evt);
            }
        });
        jMenu4.add(choose_Database_Button);

        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(forwardStrand_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1315, Short.MAX_VALUE)
                        .addComponent(totalbases_label))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(translationStrand_label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forwardStrand_label)
                    .addComponent(totalbases_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(translationStrand_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Prototype button. initiates file choosing window. Not functional until uploading data from pc is available.
     * @param evt 
     */
    private void annotation_From_File_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annotation_From_File_ButtonActionPerformed
        chooseFile();
    }//GEN-LAST:event_annotation_From_File_ButtonActionPerformed

    
    /**
     * Opens the sequence data from the class SaveData to display all the sequence information received from the database.
     * Counts the total number of nucleotides in the primary sequence.
     * @param evt 
     */
    private void open_Files_From_DB_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_Files_From_DB_ButtonActionPerformed
        fromDatabase = true;
        displayData();
        forwardStrandTextArea.setText(originalSequence);
        
        // counts the total number of nucleotides in the primary sequence.
        totalbases_label.setText("Total bases: " + originalSequence.length());
        
        // displays the translated original sequence to protein sequence.
        proteinsequenceTextField.setText(proteinSequence);
        
        // displays the features of the annotated genes.
        displaySequenceFeatures();
    }//GEN-LAST:event_open_Files_From_DB_ButtonActionPerformed

    
    /**
     * Prototype button. Initiates file choosing window. Not functional until uploading data from pc is available.
     * @param evt 
     */
    private void sequence_From_File_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequence_From_File_ButtonActionPerformed
        chooseFile();
    }//GEN-LAST:event_sequence_From_File_ButtonActionPerformed

    
    /**
     * Checkbox for turning the highlighted annotations on and off.
     * @param evt 
     */
    private void selectToHighlight_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectToHighlight_ButtonActionPerformed
        try {
            if (selectToHighlight_Button.isSelected()) {
                highLighter();
                selectToHighlight_Button.setSelected(true);
                
            } else if (!selectToHighlight_Button.isSelected()) {
                
                Highlighter h = forwardStrandTextArea.getHighlighter();
                h.removeAllHighlights();
                selectToHighlight_Button.setSelected(false);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error: Required files not found");
        }
    }//GEN-LAST:event_selectToHighlight_ButtonActionPerformed

    
    /**
     * Initiates the class for viewing the current database credentials. The data is mutable.
     * @param evt 
     */
    private void choose_Database_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choose_Database_ButtonActionPerformed
        chooseCurrentDatabase = new CurrentDatabase();
    }//GEN-LAST:event_choose_Database_ButtonActionPerformed


    /**
     * Used to display the data from the database. if fromFile == true, it would display the data received from pc files, but this function is not ready.
     */
    private void displayData() {
        if (fromDatabase) {
            try {
                originalSequence = saveData.databridgeSequence();
                proteinSequence = saveData.databridgeSequenceToProtein();
                saveData.databridgeAnnotation();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException ex) {
                Logger.getLogger(SaveData.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (fromFile) {
            // the functions for receiving data from filesystem would go here.
            System.out.println("-- data from file here --");
        }

    }
    
    /**
     * File viewer, this method is unused. Would be used if the application was upgraded with data upload from PC files.
     */
    private void chooseFile() {
        File selectedFile;
        int reply;
        //jTextField1.setText("");
        JFileChooser fileChooser = new JFileChooser();
        reply = fileChooser.showOpenDialog(this);
        if (reply == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            //jTextField1.setText(selectedFile.getAbsolutePath());
        }
    }
    

    /**
     * Used to highlight the annotated genes in the main sequence. It uses the two positions from the start and stopcodon found in the database to highlight the sequence
     */
    private void highLighter(){
        Highlighter h = forwardStrandTextArea.getHighlighter();
        h.removeAllHighlights();
        String text = forwardStrandTextArea.getText();

        for (int j = 0; j < saveData.getAnnotationMap().size(); j += 1) {
            char ch = text.charAt(j);
            if (originalSequence.indexOf(ch) >= 0) {
                try {
                    for (Integer key : saveData.getAnnotationMap().keySet()){
                        h.addHighlight(key, saveData.getAnnotationMap().get(key), DefaultHighlighter.DefaultPainter);
                    }

                } catch (BadLocationException ble) {
                }
            }
        }
    }
    
    /**
     * Counts the number of annotated genes and displays them with a number and the position of its start codon and stop codon.
     */
    private void displaySequenceFeatures(){
        sequenceDetailsTextField.append("Sequence features:");
        
        int genecount = 1;
        
        //It counts each gene found in AnnotationMap and prints the start codon (key) and stop codon saveData.getAnnotationMap().get(key)
        for (Integer key : saveData.getAnnotationMap().keySet()){
            
            sequenceDetailsTextField.append("\ngene "+genecount+"\t"+key+"\t"+saveData.getAnnotationMap().get(key));
            
            genecount++;
        }
        
        //Sets the textfield as uneditable.
        sequenceDetailsTextField.setEditable(false);
        
    }
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IC03_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IC03_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IC03_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IC03_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IC03_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File_From_Database_Button;
    private javax.swing.JMenuItem annotation_From_File_Button;
    private javax.swing.JMenuItem check_Connection_Button;
    private javax.swing.JMenuItem choose_Database_Button;
    private javax.swing.JTextArea forwardStrandTextArea;
    private javax.swing.JLabel forwardStrand_label;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem open_Files_From_DB_Button;
    private javax.swing.JTextArea proteinsequenceTextField;
    private javax.swing.JCheckBoxMenuItem selectToHighlight_Button;
    private javax.swing.JTextArea sequenceDetailsTextField;
    private javax.swing.JMenuItem sequence_From_File_Button;
    private javax.swing.JLabel totalbases_label;
    private javax.swing.JLabel translationStrand_label;
    // End of variables declaration//GEN-END:variables
}
